/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOSPINZERO_KD_FEPSPR_WITHBKG
#define ROOSPINZERO_KD_FEPSPR_WITHBKG

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

 
class RooSpinZero_KD_fepspr_withBkg : public RooAbsPdf {
public:
  RooSpinZero_KD_fepspr_withBkg() {} ; 
  RooSpinZero_KD_fepspr_withBkg(const char *name, const char *title,
		    RooAbsReal& _kd,
		    RooAbsReal& _fepspr,
		    RooAbsReal& _mu,
 		    vector<TH1F*>& _histos,
 		    vector<TH1F*>& _histos_bkg
		    );
		    
  RooSpinZero_KD_fepspr_withBkg(const RooSpinZero_KD_fepspr_withBkg& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooSpinZero_KD_fepspr_withBkg(*this,newname); }
  inline virtual ~RooSpinZero_KD_fepspr_withBkg() { }
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  double IntegralT[3];
  double IntegralT_bkg[3];

protected:

	RooRealProxy kd;
	RooRealProxy fepspr;
	RooRealProxy mu;
	vector<TH1F*> histos;
	vector<TH1F*> histos_bkg;

	Double_t evaluate() const ;

private:

  ClassDef(RooSpinZero_KD_fepspr_withBkg,1) // Your description goes here...
};
 
#endif
