#ifndef HZZ4l_h
#define HZZ4l_h

#include "HZZ4lBase.h"
#include "TLorentzVector.h"
#include "TVector3.h"
#include "TMath.h"
#include "TGraph.h"
#include "TGraphAsymmErrors.h"
#include <ZZMatrixElement/MELA/interface/Mela.h>
//#include <ZZMatrixElement/MELA/interface/TVar.hh>
#include <ZZMatrixElement/MELA/src/computeAngles.h>

#include <TString.h>
#include <string>
#include <vector>

const double PI_VAL = TMath::Pi();
const int kNumFiles=35;
const int nFinalStates=5;

enum sample {
	kfg2_0_fg4_0,
	kfg2_1_fg4_0,
	kfg2_0_fg4_1,
	kfLambda1_1,

	kfg2_05_fg4_0,
	kfg2_0_fg4_05,
	kfg2_05_fg4_05,
	kfLambda1_m05,

	kfg2_33_fg4_33,
	kfg2_01_fg4_0,
	kfg2_0_fg4_01,
	kfg2_01_fg4_01,

	kfLambda1_05,
	kfLambda1_03, // No sample here
	kfLambda1_01,

	kfg2_05_fg4_0_p290,
	kfg2_0_fg4_05_p390,
	kfg2_05_fg4_05_p390,

	kfLambda1_05_pL190,

	kfg2_33_fg4_33_p390,
	kfg2_01_fg4_0_p290,
	kfg2_0_fg4_01_p390,
	kfg2_01_fg4_01_p390,

	kfg2_05_fg4_0_p2Pi,
	kfg2_0_fg4_05_p3Pi,
	kfg2_05_fg4_05_p2Pi,

	kfg2_05_fLambda1_m05,
	kfg2_05_fLambda1_m05_p2270,
	kfg2_05_fLambda1_05,
	kfg2_33_fLambda1_33_p2Pi,

	kfg4_05_fLambda1_m05,
	kfg4_05_fLambda1_m05_p3270,
	kfg4_05_fLambda1_05,
	kfg4_33_fLambda1_33_p3Pi,

// ZZ LambdaQ and ZZ imaginary g1
	kfLambdaQ_1,
	kfLambdaQ_1_pLQ90,
	kfg1_p190,

	kfg1_05_fLambdaQ_05,
	kfg1_05_fLambdaQ_05_pLQ90,

// ZG and GG
	kfZG_1_fGG_0,
	kfZG_0_fGG_1,
	kfZG_05_fGG_0,
	kfZG_0_fGG_05,

	kfMZG_1_fMGG_0,
	kfMZG_0_fMGG_1,
	kfMZG_05_fMGG_0,
	kfMZG_0_fMGG_05,

	kfZG_05_fMZG_05,
	kfGG_05_fMGG_05,

	kfZG_SM_fGG_SM,

	kfZG_Lambda1_1,
	kfZG_Lambda1_05,

	kNumSamples
};
enum {
	p_mH,
	p_GH,
	p_Re_g1,
	p_Im_g1,
	p_Re_g2,
	p_Im_g2,
	p_Re_g3,
	p_Im_g3,
	p_Re_g4,
	p_Im_g4,
	p_Re_L1,
	p_Im_L1,
	p_Re_LQ,
	p_Im_LQ,
	p_Re_a2ZG,
	p_Im_a2ZG,
	p_Re_a2GG,
	p_Im_a2GG,
	p_Re_a3ZG,
	p_Im_a3ZG,
	p_Re_a3GG,
	p_Im_a3GG,
	p_Re_ZGL1,
	p_Im_ZGL1,
	p_NumArray_MEweight_SpinZero
};

const double gi_phi2_phi4[2][kNumSamples][p_NumArray_MEweight_SpinZero] = {
	{
		//	mH	GH	Re-g1	Im-g1	Re-g2	Im-g2	Re-g3	Im-g3	Re-g4	Im-g4	Re-L1	Im-L1	Re-LQ	Im-LQ	Re-a2ZG	Im-a2ZG	Re-a2GG	Im-a2GG	Re-a3ZG	Im-a3ZG	Re-a3GG	Im-a3GG	Re-ZGL1	Im-ZGL1
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	SM			
		{	126,	0.1,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=1				
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=1				
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fL1=1				
																															
		{	126,	0.1,	1.0,	0,	1.624,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5				
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	2.484,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5				
		{	126,	0.1,	0,	0,	0.654,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5				
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=-0.5,	for	T3	templates	
																															
		{	126,	0.1,	1.0,	0,	1.624,	0,	0,	0,	2.484,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3				
		{	126,	0.1,	1.0,	0,	0.541,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1				
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0.828,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1				
		{	126,	0.1,	1.0,	0,	0.574,	0,	0,	0,	0.878,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.1				
																															
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=0.5				
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	-7857.90,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	flambda1=0.3		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	-4001.05,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	flambda1=0.1		
																															
		{	126,	0.1,	1.0,	0,	0,	1.624,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	phia2=90			
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	2.484,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	phia3=90			
		{	126,	0.1,	0,	0,	0.654,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5,	phia3=90			

		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=0.5,	phiL1=90				

		{	126,	0.1,	1.0,	0,	1.624,	0,	0,	0,	0,	2.484,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3,	phia3=90			
		{	126,	0.1,	1.0,	0,	0,	0.541,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	phia2=90			
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0.828,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1,	phia3=90			
		{	126,	0.1,	1.0,	0,	0.574,	0,	0,	0,	0,	0.878,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	fa3=0.1,	phia3=90		
																															
		{	126,	0.1,	1.0,	0,	-1.624,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5				
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	-2.484,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.5				
		{	126,	0.1,	0,	0,	-0.654,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5,	fa3=0.5			
																															
		{	126,	0.1,	0,	0,	1.624,	0,	0,	0,	0,	0,	12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	fLambda1=-0.5,	for	templates	25
		{	126,	0.1,	0,	0,	0,	-1.624,	0,	0,	0,	0,	12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5i,	fLambda1=-0.5,	for	templates	26
		{	126,	0.1,	0,	0,	1.624,	0,	0,	0,	0,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	fLambda1=0.5	27		
		{	126,	0.1,	1.0,	0,	-1.624,	0,	0,	0,	0,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.33,	fLambda1=0.33	28		
																															
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	2.484,	0,	12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	fLambda1=-0.5,	for	templates	29
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	-2.484,	12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.5i,	fLambda1=-0.5,	for	templates	30
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	2.484,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	fLambda1=0.5	31		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	-2.484,	0,	-12003.14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.33,	fLambda1=0.33	32		


		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6298.8158226,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambdaQ=1	offshell			
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6298.8158226,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=1,	phiLQ=90	offshell			
		{	126,	0.1,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=1,	phig1=90				

		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6298.8158226,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=fLambdaQ=0.5,	phiLQ=0		offshell		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6298.8158226,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=fLambdaQ=0.5,	phiLQ=90	offshell			


		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	PM-ZG	33		
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	PM-GG	34		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.0476,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fPM-ZG=0.5	35			
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.0541,	0,	0,	0,	0,	0,	0,	0	},	//	fPM-GG=0.5	36			
																															
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0	},	//	Pure	M-ZG	37		
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0	},	//	Pure	M-GG	38		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.050895,	0,	0,	0,	0,	0	},	//	fM-ZG=0.5	39			
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.052872,	0,	0,	0	},	//	fM-GG=0.5	40			
																															
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.0476,	0,	0,	0,	0.050895,	0,	0,	0,	0,	0	},	//	fZG=fM-ZG=0.5	41			
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.0541,	0,	0,	0,	-0.052872,	0,	0,	0	},	//	fGG=fM-GG=0.5	42			
																															
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.00175,	0,	-0.002,	0,	0,	0,	0,	0,	0,	0	},	//	SM	ZZ,	ZG.	GG	43
																															
		{	126,	0.1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0	},	//	Pure	ZG-L1	44		
		{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-7591.914,	0	}	//	fZG-L1=0.5	45			
	},
	{
		//	mH	GH	Re-g1	Im-g1	Re-g2	Im-g2	Re-g3	Im-g3	Re-g4	Im-g4	Re-L1	Im-L1	Re-LQ	Im-LQ	Re-a2ZG	Im-a2ZG	Re-a2GG	Im-a2GG	Re-a3ZG	Im-a3ZG	Re-a3GG	Im-a3GG	Re-ZGL1	Im-ZGL1
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	SM	0		
		{	125.6,	0.00415,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=1	1			
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=1	2			
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fL1=1	3			
																															
		{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5	4			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5	5			
		{	125.6,	0.00415,	0,	0,	0.650,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5	6			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=-0.5,	for	T3	templates	7
																															
		{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3	8			
		{	125.6,	0.00415,	1.0,	0,	0.546,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1	9			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0.840,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1	10			
		{	125.6,	0.00415,	1.0,	0,	0.579,	0,	0,	0,	0.891,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.1	11			
																															
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=0.5	12			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	-7885.965,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	flambda1=0.3	13			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	-4015.337,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	flambda1=0.1	14			
																															
		{	125.6,	0.00415,	1.0,	0,	0,	1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	phia2=90	15		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	phia3=90	16		
		{	125.6,	0.00415,	0,	0,	0.650,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5,	phia3=90	17		

		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=0.5,	phiL1=90	18			

		{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3,	phia3=90	19		
		{	125.6,	0.00415,	1.0,	0,	0,	0.546,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	phia2=90	20		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0.840,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1,	phia3=90	21		
		{	125.6,	0.00415,	1.0,	0,	0.579,	0,	0,	0,	0,	0.891,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	fa3=0.1,	phia3=90	22	
																															
		{	125.6,	0.00415,	1.0,	0,	-1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5	23			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	-2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.5	24			
		{	125.6,	0.00415,	0,	0,	-0.650,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5,	fa3=0.5	25		
																															
		{	125.6,	0.00415,	0,	0,	1.638,	0,	0,	0,	0,	0,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	fLambda1=-0.5,	for	templates	26
		{	125.6,	0.00415,	0,	0,	0,	-1.638,	0,	0,	0,	0,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5i,	fLambda1=-0.5,	for	templates	27
		{	125.6,	0.00415,	0,	0,	1.638,	0,	0,	0,	0,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	fLambda1=0.5	28		
		{	125.6,	0.00415,	1.0,	0,	-1.638,	0,	0,	0,	0,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.33,	fLambda1=0.33	29		
																															
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	2.521,	0,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	fLambda1=-0.5,	for	templates	30
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	-2.521,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.5i,	fLambda1=-0.5,	for	templates	31
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	2.521,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	fLambda1=0.5	32		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	-2.521,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.33,	fLambda1=0.33	33		


		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6338.9995537,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambdaQ=1	34			
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6338.9995537,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambdaQ=1,	phiLQ=90	35			
		{	125.6,	0.00415,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=1,	phig1=90	36			

		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6338.9995537,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=fLambdaQ=0.5,	phiLQ=0		37		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-6338.9995537,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fg1=fLambdaQ=0.5,	phiLQ=90	38			


		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	PM-ZG	39		
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	PM-GG	40		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.0473,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fPM-ZG=0.5	41			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.0531,	0,	0,	0,	0,	0,	0,	0	},	//	fPM-GG=0.5	42			
																															
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0	},	//	Pure	M-ZG	43		
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0	},	//	Pure	M-GG	44		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.052161,	0,	0,	0,	0,	0	},	//	fM-ZG=0.5	45			
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.053666,	0,	0,	0	},	//	fM-GG=0.5	46			
																															
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.0473,	0,	0,	0,	0.052161,	0,	0,	0,	0,	0	},	//	fZG=fM-ZG=0.5	47			
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-0.0531,	0,	0,	0,	-0.053666,	0,	0,	0	},	//	fGG=fM-GG=0.5	48			
																															
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0.00175,	0,	-0.002,	0,	0,	0,	0,	0,	0,	0	},	//	SM	ZZ,	ZG.	GG	49
																															
		{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0	},	//	Pure	ZG-L1	50		
		{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	-7591.914,	0	}	//	fZG-L1=0.5	51			
	}
};

const double gi_phi2_phi4_files[kNumFiles][p_NumArray_MEweight_SpinZero]={
	//	mH	GH	Re-g1	Im-g1	Re-g2	Im-g2	Re-g3	Im-g3	Re-g4	Im-g4	Re-L1	Im-L1	Re-LQ	Im-LQ	Re-a2ZG	Im-a2ZG	Re-a2GG	Im-a2GG	Re-a3ZG	Im-a3ZG	Re-a3GG	Im-a3GG	Re-ZGL1	Im-ZGL1						
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
																															
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	2.498,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	2.498,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	-2.498,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	-2.498,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
																															
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0.8327,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	0.8327,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	-0.8327,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
	{	126,	0.1,	1.0,	0,	0,	0,	0,	0,	0,	-0.8327,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},					
//	125.6	GeV	Spin	0																											
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	Pure	SM		
	{	125.6,	0.00415,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=1			
	{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=1			
	{	125.6,	0.00415,	0,	0,	0,	0,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fL1=1			
																															
	{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5			
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5			
	{	125.6,	0.00415,	0,	0,	0.650,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5			
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=-0.5,	for	T3	templates
																															
	{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3			
	{	125.6,	0.00415,	1.0,	0,	0.546,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1			
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0.840,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1			
	{	125.6,	0.00415,	1.0,	0,	0.579,	0,	0,	0,	0.891,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.1			
																															
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	-12046.01,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fLambda1=0.5			
//	//	NOTE:	No	FLambda1=0.3	sample	at	125.6	GeV	is	available																					
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0,	-4015.337,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	flambda1=0.1			
																															
	{	125.6,	0.00415,	1.0,	0,	0,	1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.5,	phia2=90		
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.5,	phia3=90		
	{	125.6,	0.00415,	0,	0,	0.650,	0,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=0.5,	phia3=90		
																															
	{	125.6,	0.00415,	1.0,	0,	1.638,	0,	0,	0,	0,	2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=fa3=1/3,	phia3=90		
	{	125.6,	0.00415,	1.0,	0,	0,	0.546,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	phia2=90		
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	0,	0.840,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=0.1,	phia3=90		
	{	125.6,	0.00415,	1.0,	0,	0.579,	0,	0,	0,	0,	0.891,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=0.1,	fa3=0.1,	phia3=90	
																															
	{	125.6,	0.00415,	1.0,	0,	-1.638,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa2=-0.5			
	{	125.6,	0.00415,	1.0,	0,	0,	0,	0,	0,	-2.521,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	},	//	fa3=-0.5	
	{	125.6,	0.00415,	0,	0,	-0.650,	0,	0,	0,	1.0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0	}	//	fa2=-0.5,	fa3=0.5		
};


//class TH1F;

class HZZ4l : public HZZ4lBase{
public:
  
  HZZ4l(TChain *tree, TString sampleName);
  virtual ~HZZ4l() {};
  void Loop(const Int_t channelType, const TString outputName);
  void identifySample(std::string outputfilename);

  //Methods to set the analyzer
  void set8TeV(bool myis8TeV){is8TeV = myis8TeV;}
  void setBSM(int myBSM_flag){BSM_flag = myBSM_flag;}
  void setKappa(float mykappa){kappa = mykappa;}
  void setCR(bool myisCR){isCR = myisCR;}
  void setHZZ4l(bool myHZZ4l,int myHZZ4lSample,float myHZZ4L_HMassPole,double myHZZ4lSample_bkgInterfWidth=0){isHZZ4l = myHZZ4l; HZZ4lSample=myHZZ4lSample; HZZ4L_HMassPole=myHZZ4L_HMassPole;HZZ4lSample_bkgInterfWidth=myHZZ4lSample_bkgInterfWidth;}
  void setNeedsLepInt(bool myNeedsLepInt){needsLepInt = myNeedsLepInt;}
  void setGGQQB(bool myZZQQB,bool myZZGG){isZZQQB = myZZQQB; isZZGG = myZZGG;}

  // Some bookkeeping
	double N_generated[nFinalStates][kNumSamples+1];
	double N_generated_4GeVcut[nFinalStates][kNumSamples+1];

private:

  Float_t getMCWeight(const int year, const Int_t CandIndex) const;
  Float_t getAllWeight(const Float_t LepPt, const Float_t LepEta, const Int_t year, Int_t LepID) const;

  Float_t getNormalizedWeight(const Int_t channelType) const;

  std::string getSampleName(const std::string filestring) const;
  Int_t findBestCRCand(int) const;

  void getWeightFromFile(const TString& mPOLE, const Bool_t isVBF, const Bool_t isNewHighmass);
  Float_t getPwhgWeight(double mH, const Int_t WhichSide = 0) const;
  Float_t getHqTWeight(double mH, double genPt, TFile* f) const;

  Float_t getFakeWeight(const Float_t LepPt, const Float_t LepEta, const Int_t year, Int_t LepID, Int_t LepZ1ID);
  Float_t getZXfake_weight(const int year, const Int_t CandIndex);
  float getSpinZeroHiggsMELAWeight(Mela& myMela, int lepId[4], float angularOrdered[8], double selfDHvvcoupl[31][2]);
  float getMCFMMELAWeight(Mela& myMela, int lepId[4], float angularOrdered[8]);
  void protection_nullPt(TVector3& myV);
  void protection_nullPt(TLorentzVector& myV);
  void calculateAngles(TLorentzVector thep4H, TLorentzVector thep4Z1, TLorentzVector thep4M11, TLorentzVector thep4M12, TLorentzVector thep4Z2, TLorentzVector thep4M21, TLorentzVector thep4M22, float& costheta1, float& costheta2, float& phi, float& costhetastar, float& phistar1, float& phistar2, float& phistar12, float& phi1, float& phi2);
//  void testSpin0MEDivergence(int iSample, int iHypo, float& MEVal);

  TString theSample;

  bool is8TeV;
  bool isCR;
  int BSM_flag;
  float kappa;

  bool isHZZ4l;
  bool needsLepInt;
  bool isZZQQB;
  bool isZZGG;
  int HZZ4lSample;
  double HZZ4lSample_bkgInterfWidth;
  float HZZ4L_HMassPole;

  TH1F* nEventComplete;

  std::vector<double> pwhg_bincenters;
  std::vector<double> pwhg_weight;
  std::vector<double> pwhg_weightCPSP;
  std::vector<double> pwhg_weightCPSM;
  std::vector<double> pwhg_weightIntP;
  std::vector<double> pwhg_weightIntM;

  TFile* ZXWeightTables[4];

};
#endif
